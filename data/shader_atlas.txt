//example of some shaders compiled
flat basic.vs flat.fs
texture basic.vs texture.fs
depth quad.vs depth.fs
multi basic.vs multi.fs
//forward
multi_pass basic.vs multi_pass.fs
single_pass basic.vs single_pass.fs 
//deferred
g_buffers basic.vs g_buffers.fs
deferred_multi_pass quad.vs deferred_multi_pass.fs
deferred_geometry basic.vs deferred_multi_pass.fs

deferred_ambient quad.vs deferred_ambient.fs

//FX
ssao quad.vs ssao.fs
tonemapper quad.vs tonemapper.fs

//irradiance
probe basic.vs probe.fs


\basic.vs

#version 330 core

in vec3 a_vertex;
in vec3 a_normal;
in vec2 a_coord;
in vec4 a_color;

uniform vec3 u_camera_pos;

uniform mat4 u_model;
uniform mat4 u_viewprojection;

//this will store the color for the pixel shader
out vec3 v_position;
out vec3 v_world_position;
out vec3 v_normal;
out vec2 v_uv;
out vec4 v_color;

uniform float u_time;

void main()
{	
	//calcule the normal in camera space (the NormalMatrix is like ViewMatrix but without traslation)
	v_normal = (u_model * vec4( a_normal, 0.0) ).xyz;
	
	//calcule the vertex in object space
	v_position = a_vertex;
	v_world_position = (u_model * vec4( v_position, 1.0) ).xyz;
	
	//store the color in the varying var to use it from the pixel shader
	v_color = a_color;

	//store the texture coordinates
	v_uv = a_coord;

	//calcule the position of the vertex using the matrices
	gl_Position = u_viewprojection * vec4( v_world_position, 1.0 );
}

\light_attenuation

if(u_light_type == 2){ //directional
		L = normalize(-u_light_direction);
}else{
	L = normalize(u_light_pos - world_position);
	//compute distance
	float light_distance = length(u_light_pos - world_position);

	//compute a linear attenuation factor
	att_factor = u_light_maxdist - light_distance;

	//normalize factor
	att_factor /= u_light_maxdist;

	//ignore negative values
	att_factor = max( att_factor, 0.0 );

	if(u_light_type == 1){ //spot
			
		vec3 D = normalize(u_light_direction);

		float spotCos = dot(D,-L);

		if(spotCos >= u_cosCutoff){
			spotFactor = pow(spotCos, u_spot_exp);
		}else{
			spotFactor = 0.0;
		}
	}
}

\shadows
//shadows
uniform sampler2D u_shadowmap;
uniform mat4 u_shadow_viewproj;
uniform float u_shadow_bias;

float computeShadow(vec3 world_position){
	vec4 proj_pos = u_shadow_viewproj * vec4(world_position,1.0);

	vec2 shadow_uv = proj_pos.xy / proj_pos.w;

	shadow_uv = shadow_uv * 0.5 + vec2(0.5);

	float real_depth = (proj_pos.z - u_shadow_bias) / proj_pos.w;

	real_depth = real_depth * 0.5 + 0.5;

	float shadow_depth = texture( u_shadowmap, shadow_uv).x;
	float shadow_factor = 1.0;

	if( shadow_uv.x < 0.0 || shadow_uv.x > 1.0 ||shadow_uv.y < 0.0 || shadow_uv.y > 1.0 )
			return 1.0;

	//it is before near or behind far plane
	if(real_depth < 0.0 || real_depth > 1.0)
		return 1.0;

	if( shadow_depth < real_depth )
		shadow_factor = 0.0;
	
	return shadow_factor;
}

\color_correction
#define GAMMA 2.2
#define INV_GAMMA 0.45

// degamma
vec3 gamma_to_linear(vec3 color)
{
	return pow(color, vec3(INV_GAMMA));
}

// gamma
vec3 linear_to_gamma(vec3 color)
{
	return pow(color, vec3(GAMMA));
}

\light_uniforms

uniform vec3 u_light_pos;
uniform vec3 u_light_ambient;
uniform vec3 u_light_color;
uniform vec3 u_light_direction;
uniform int u_light_type;
uniform float u_light_maxdist;
uniform float u_cosCutoff;
uniform float u_light_intensity;
uniform float u_spot_exp;
uniform int u_iteration;

struct sLVectors{
	vec3 N;
	vec3 L;
	vec3 V;
	vec3 R;
	vec3 H;
};

struct sDots{
	float NdotL;
	float NdotV;
	float NdotH;
	float LdotH;
};


sLVectors set_vectors(vec2 uv, vec3 N, vec3 cam_pos, vec3 world_position){
	sLVectors vectors;

	vectors.N = N;	
	vectors.V = normalize(cam_pos - world_position);
	vectors.R = normalize(reflect(-vectors.L,vectors.N));
	vectors.H = normalize(vectors.V + vectors.L);

	return vectors;
}

sDots computeDots(sLVectors vectors){
	sDots dots;
	float low_clamp_factor = 0.001;
	
	/*dots.NdotL = max(low_clamp_factor,dot(vectors.N,vectors.L));
	dots.NdotV = max(low_clamp_factor,dot(vectors.N,vectors.V));
	dots.NdotH = max(low_clamp_factor,dot(vectors.N,vectors.H));
	dots.LdotH = max(low_clamp_factor,dot(vectors.L, vectors.H));*/

	dots.NdotL = clamp(dot(vectors.N,vectors.L),0.001,0.99);
	dots.NdotV = clamp(dot(vectors.N,vectors.V),0.001,0.99);
	dots.NdotH = clamp(dot(vectors.N,vectors.H),0.001,0.99);
	dots.LdotH = clamp(dot(vectors.L, vectors.H),0.001,0.99);

	return dots;
} 


//PBR
#define RECIPROCAL_PI 0.3183098861837697
#define PI 3.14159265359


// Normal Distribution Function using GGX Distribution
float D_GGX (	const in float NoH, const in float linearRoughness ){
	float a2 = linearRoughness * linearRoughness;
	float f = (NoH * NoH) * (a2 - 1.0) + 1.0;
	return a2 / (PI * f * f);
}

// Fresnel term with scalar optimization(f90=1)
float F_SchlickF( const in float VoH, const in float f0){
	float f = pow(1.0 - VoH, 5.0);
	return f0 + (1.0 - f0) * f;
}


// Fresnel term with colorized fresnel
vec3 F_SchlickV( const in float VoH, const in vec3 f0){
	float f = pow(1.0 - VoH, 5.0);
	return f0 + (vec3(1.0) - f0) * f;
}

float GGX(float NdotV, float k){
	return NdotV / (NdotV * (1.0 - k) + k);
}
	
float G_Smith( float NdotV, float NdotL, float roughness)
{
	float k = pow(roughness + 1.0, 2.0) / 8.0;
	return GGX(NdotL, k) * GGX(NdotV, k);
}


vec3 specularBRDF( float roughness, vec3 f0, sDots dots){
	float a = roughness * roughness;

	// Normal Distribution Function
	float D = D_GGX( dots.NdotH, a );

	// Fresnel Function
	vec3 F = F_SchlickV( dots.LdotH, f0 );

	// Visibility Function (shadowing/masking)
	float G = G_Smith( dots.NdotV, dots.NdotL, roughness );
		
	// Norm factor
	vec3 spec = D * G * F;
	spec /= (4.0 * dots.NdotL * dots.NdotV + 1e-6);

	return spec;
}

#include "shadows"
#include "color_correction"

vec3 computePBR(sLVectors vectors, vec3 world_position, float roughness, vec3 F0, vec3 Cdiffuse){
	
	vec3 L; 
	float spotFactor = 1.0;
	float att_factor = 1.0;

	#include "light_attenuation"

	vectors.L = L;

	sDots dots = computeDots(vectors);

	vec3 specular = specularBRDF(roughness, F0, dots);

	vec3 diffuse = Cdiffuse*dots.NdotL;

	vec3 direct = diffuse + specular*dots.NdotL;

	vec3 light_color = gamma_to_linear(u_light_color);

	vec3 light_param = light_color*u_light_intensity*att_factor*spotFactor;

	vec3 light = direct*light_param;

	if(u_light_type != 0 && light != vec3(0.0)){
		light *= computeShadow(world_position);
	}

	return light;
}


vec3 computePhong(vec3 N, vec3 world_position){

	vec3 L; 
	vec3 light = vec3(0.0);
	float spotFactor = 1.0;
	float att_factor = 1.0;
	vec3 light_color = gamma_to_linear(u_light_color);

	#include "light_attenuation"

	float NdotL = dot(N,L);
	NdotL = clamp( NdotL, 0.0, 1.0 );	
	
	light += NdotL*light_color*u_light_intensity*att_factor*spotFactor;

	if(u_light_type != 0 && light != vec3(0.0)){
		light *= computeShadow(world_position);
	}

	return light;

}

\material 

//#include "color_correction"

uniform sampler2D u_albedo;
uniform sampler2D u_omr;
uniform sampler2D u_emissive;
uniform bool u_has_omr;

struct sMaterial
{
	vec4 albedo; //albedo color RGB
	vec3 F0; //Fresnel value RGB
	vec3 Cdiffuse; //diffuse value
	float metalness; //metalness
	float roughness; //roughness
	float ao; //baked ambient occlusion
	vec3 emission; //emissive 
};

//init all the material properties
sMaterial init_material(vec2 uv){
	sMaterial material;

	material.albedo = texture2D( u_albedo, uv ); 
	//degamma
	material.albedo.xyz = gamma_to_linear(material.albedo.xyz);
	
	if(u_has_omr){
		//material.roughness = max(0.01, texture2D( u_omr, uv ).z); 
		//material.metalness = min(texture2D( u_omr, uv ).y,0.99);
		material.roughness = max(0.01, texture2D( u_omr, uv ).y); 
		material.metalness = min(texture2D( u_omr, uv ).z,0.99);
	}else{
		material.roughness = 1.0; 
		material.metalness = 1.0;
	}

	material.F0 = mix( vec3(0.5), material.albedo.xyz, material.metalness );
	material.Cdiffuse = material.albedo.xyz*(vec3(1.0) - vec3(material.metalness));

	material.ao = texture2D(u_omr, uv).x;
	material.emission = gamma_to_linear(texture2D(u_emissive,uv).xyz);
	return material;
}


\realistic_normals
mat3 cotangent_frame(vec3 N, vec3 p, vec2 uv)
{
	// get edge vectors of the pixel triangle
	vec3 dp1 = dFdx( p );
	vec3 dp2 = dFdy( p );
	vec2 duv1 = dFdx( uv );
	vec2 duv2 = dFdy( uv );
	
	// solve the linear system
	vec3 dp2perp = cross( dp2, N );
	vec3 dp1perp = cross( N, dp1 );
	vec3 T = dp2perp * duv1.x + dp1perp * duv2.x;
	vec3 B = dp2perp * duv1.y + dp1perp * duv2.y;
 
	// construct a scale-invariant frame 
	float invmax = inversesqrt( max( dot(T,T), dot(B,B) ) );
	return mat3( T * invmax, B * invmax, N );
}

// assume N, the interpolated vertex normal and 
// WP the world position
//vec3 normal_pixel = texture2D( normalmap, uv ).xyz; 
vec3 perturbNormal(vec3 N, vec3 WP, vec2 uv, vec3 normal_pixel)
{
	normal_pixel = normal_pixel * 255./127. - 128./127.;
	mat3 TBN = cotangent_frame(N, WP, uv);
	return normalize(TBN * normal_pixel);
}

\multi_pass.fs

#version 330 core

in vec3 v_position;
in vec3 v_world_position;
in vec3 v_normal;
in vec2 v_uv;
in vec4 v_color;

uniform vec4 u_color;

uniform sampler2D u_normal_map;

uniform float u_time;
uniform float u_alpha_cutoff;

uniform mat4 u_model;
uniform vec3 u_camera_position;

#include "light_uniforms"
#include "material"

#include "realistic_normals"

//uniform float u_emissive_factor;
uniform bool u_has_emissive;
uniform bool u_has_normal;

uniform bool u_has_shadows;

uniform int u_ilum_mode;

out vec4 FragColor;

void main()
{
	vec4 color = u_color;

	sMaterial material = init_material(v_uv);

	color *= material.albedo;

	vec3 total_light = vec3(0.0);
	if(u_iteration == 0){
		total_light += gamma_to_linear(u_light_ambient);
		if(u_has_omr) {
			total_light *= material.ao;
		}
	}
	
	//light equation vectors
	vec3 N = normalize(v_normal);
	vec3 V = normalize(u_camera_position - v_world_position); 
	
	if(u_has_normal){
		vec3 np = texture( u_normal_map, v_uv ).xyz;
		N = perturbNormal(N, V, v_uv, np);
	}

	if(u_ilum_mode == 0){
		total_light += computePhong(N,v_world_position);
	}else if(u_ilum_mode == 1){
		sLVectors vectors = set_vectors(v_uv, N, u_camera_position, v_world_position);
		vec3 PBR = computePBR(vectors, v_world_position, material.roughness, material.F0, material.Cdiffuse);
		total_light += PBR;
	}
	
	color.xyz *= total_light; 

	if(color.a < u_alpha_cutoff)
		discard;

	if(u_iteration == 0 && u_has_emissive){
		color.xyz += material.emission;
	}

	//color.xyz = linear_to_gamma(color.xyz); //we will apply this in the tonemapper

	FragColor = color;	
}

\single_pass.fs

#version 330 core

in vec3 v_position;
in vec3 v_world_position;
in vec3 v_normal;
in vec2 v_uv;
in vec4 v_color;

uniform vec4 u_color;

uniform sampler2D u_albedo;
uniform sampler2D u_normal_map;
uniform sampler2D u_emissive;
uniform sampler2D u_omr;

uniform float u_time;
uniform float u_alpha_cutoff;

uniform mat4 u_model;
uniform vec3 u_camera_position;

const int MAX_LIGHTS = 6;
uniform vec3 u_light_pos[MAX_LIGHTS];
uniform vec3 u_light_color[MAX_LIGHTS];
uniform vec3 u_light_ambient;
uniform vec3 u_light_direction[MAX_LIGHTS];
uniform int u_light_type[MAX_LIGHTS];
uniform float u_light_maxdist[MAX_LIGHTS];
uniform float u_cosCutoff[MAX_LIGHTS];
uniform float u_light_intensity[MAX_LIGHTS];
uniform float u_spot_exp[MAX_LIGHTS];

uniform int u_num_lights;

uniform bool u_has_emissive;

uniform bool u_has_normal;
uniform bool u_has_ao;

out vec4 FragColor;

#include "realistic_normals"

void main()
{
	vec3 light = vec3(0.0);
	light += u_light_ambient;
	if(u_has_ao){
		light *= vec3(texture( u_omr, v_uv ).x);
	}

	vec4 color = u_color;
	color *= texture( u_albedo, v_uv );

	//light equation vectors
	vec3 N = normalize(v_normal);
	vec3 V = normalize(u_camera_position - v_world_position);
	vec3 L = vec3(0.0);
	float att_factor = 1.0; 
	float spotFactor = 1.0;
	vec3 light_color;

	if(u_has_normal){
		vec3 np = texture( u_normal_map, v_uv ).xyz;
		N = perturbNormal(N, V, v_uv, np);
	}

	for(int i = 0; i < MAX_LIGHTS; i++){
		if(i < u_num_lights){
			att_factor = 1.0; 
			spotFactor = 1.0;
			light_color = u_light_color[i];

			if(u_light_type[i] == 2){
				L = normalize(-u_light_direction[i]);
			}else{
				L = normalize(u_light_pos[i] - v_world_position);

				float light_distance = length(u_light_pos[i] - v_world_position);

				//compute a linear attenuation factor
				att_factor = u_light_maxdist[i] - light_distance;

				//normalize factor
				att_factor /= u_light_maxdist[i];

				//ignore negative values
				att_factor = max( att_factor, 0.0 );

				if(u_light_type[i] == 1){ //spot
			
					vec3 D = normalize(u_light_direction[i]);

					float spotCos = dot(D,-L);

					if(spotCos >= u_cosCutoff[i]){
						spotFactor = pow(spotCos, u_spot_exp[i]);
					}else{
						light_color = vec3(0.0);
					}
				}
			}
			
			float NdotL = max(dot(N,L),0.0);
			light += NdotL*light_color*u_light_intensity[i]*att_factor*spotFactor;
		}
	}

	color.xyz *= light; 

	if(u_has_emissive){

		color.xyz += texture( u_emissive, v_uv ).xyz;//*u_emissive_factor;
	}

	if(color.a < u_alpha_cutoff)
		discard;

	FragColor = color;	
}

\quad.vs

#version 330 core

in vec3 a_vertex;
in vec2 a_coord;
out vec2 v_uv;

void main()
{	
	v_uv = a_coord;
	gl_Position = vec4( a_vertex, 1.0 );
}


\flat.fs

#version 330 core

uniform vec4 u_color;

out vec4 FragColor;

void main()
{
	FragColor = u_color;
}


\texture.fs

#version 330 core

in vec3 v_position;
in vec3 v_world_position;
in vec3 v_normal;
in vec2 v_uv;
in vec4 v_color;

uniform vec4 u_color;
uniform sampler2D u_albedo;
uniform float u_time;
uniform float u_alpha_cutoff;

out vec4 FragColor;

void main()
{
	vec2 uv = v_uv;
	vec4 color = u_color;
	color *= texture( u_albedo, v_uv );

	if(color.a < u_alpha_cutoff)
		discard;

	FragColor = color;
}


\multi.fs

#version 330 core

in vec3 v_position;
in vec3 v_world_position;
in vec3 v_normal;
in vec2 v_uv;

uniform vec4 u_color;
uniform sampler2D u_albedo;
uniform float u_time;
uniform float u_alpha_cutoff;

layout(location = 0) out vec4 FragColor;
layout(location = 1) out vec4 NormalColor;

void main()
{
	vec2 uv = v_uv;
	vec4 color = u_color;
	color *= texture( u_albedo, uv );

	if(color.a < u_alpha_cutoff)
		discard;

	vec3 N = normalize(v_normal);

	FragColor = color;
	NormalColor = vec4(N,1.0);
}


\depth.fs

#version 330 core

uniform vec2 u_camera_nearfar;
uniform sampler2D u_texture; //depth map
in vec2 v_uv;
out vec4 FragColor;

void main()
{
	float n = u_camera_nearfar.x;
	float f = u_camera_nearfar.y;
	float z = texture2D(u_texture,v_uv).x;
	float color = n * (z + 1.0) / (f + n - z * (f - n));
	FragColor = vec4(color);
}


\instanced.vs

#version 330 core

in vec3 a_vertex;
in vec3 a_normal;
in vec2 a_coord;

in mat4 u_model;

uniform vec3 u_camera_pos;

uniform mat4 u_viewprojection;

//this will store the color for the pixel shader
out vec3 v_position;
out vec3 v_world_position;
out vec3 v_normal;
out vec2 v_uv;

void main()
{	
	//calcule the normal in camera space (the NormalMatrix is like ViewMatrix but without traslation)
	v_normal = (u_model * vec4( a_normal, 0.0) ).xyz;
	
	//calcule the vertex in object space
	v_position = a_vertex;
	v_world_position = (u_model * vec4( a_vertex, 1.0) ).xyz;
	
	//store the texture coordinates
	v_uv = a_coord;

	//calcule the position of the vertex using the matrices
	gl_Position = u_viewprojection * vec4( v_world_position, 1.0 );
}


/***************************************************************************************************************************/
//deferred

\g_buffers.fs

#version 330 core

in vec3 v_position;
in vec3 v_world_position;
in vec3 v_normal;
in vec2 v_uv;
in vec4 v_color;

uniform vec4 u_color;
uniform float u_alpha_cutoff;

uniform sampler2D u_albedo;
uniform sampler2D u_omr;
uniform sampler2D u_normal_map;
uniform sampler2D u_emissive;

uniform bool u_has_normal;

uniform vec3 u_camera_position;

#include "realistic_normals"

float dither4x4(vec2 position, float brightness)
{
  int x = int(mod(position.x, 4.0));
  int y = int(mod(position.y, 4.0));
  int index = x + y * 4;
  float limit = 0.0;

  if (x < 8) {
    if (index == 0) limit = 0.0625;
    if (index == 1) limit = 0.5625;
    if (index == 2) limit = 0.1875;
    if (index == 3) limit = 0.6875;
    if (index == 4) limit = 0.8125;
    if (index == 5) limit = 0.3125;
    if (index == 6) limit = 0.9375;
    if (index == 7) limit = 0.4375;
    if (index == 8) limit = 0.25;
    if (index == 9) limit = 0.75;
    if (index == 10) limit = 0.125;
    if (index == 11) limit = 0.625;
    if (index == 12) limit = 1.0;
    if (index == 13) limit = 0.5;
    if (index == 14) limit = 0.875;
    if (index == 15) limit = 0.375;
  }

  return brightness < limit ? 0.0 : 1.0;
}

layout(location = 0) out vec4 FragColor;
layout(location = 1) out vec4 NormalColor;
layout(location = 2) out vec4 OMR; //occlussion_metalness_roughness
layout(location = 3) out vec4 EmissiveColor; //emissive


void main()
{
	vec2 uv = v_uv;
	vec4 color = u_color;
	color *= texture( u_albedo, v_uv );

	vec3 N = normalize(v_normal);

	if(u_has_normal){
		vec3 V = normalize(u_camera_position - v_world_position);
		vec3 np = texture( u_normal_map, v_uv ).xyz;
		N = perturbNormal(N, V, v_uv, np);
	}

	if(color.a < u_alpha_cutoff)
		discard;

	/*if(dither4x4(gl_FragCoord.xy, color.a) == 0.0)
		discard;*/

	FragColor = color;
	NormalColor = vec4(N*0.5 + vec3(0.5),1.0);
	OMR = texture( u_omr, v_uv );
	EmissiveColor = texture( u_emissive, v_uv );

}

\deferred_multi_pass.fs

#version 330 core

in vec2 v_uv;

#include "light_uniforms"
#include "material"

uniform sampler2D u_depth_texture;
uniform sampler2D u_normal_texture;

uniform mat4 u_inverse_viewprojection;
uniform vec2 u_iRes;
uniform vec3 u_camera_position;
uniform int u_ilum_mode;

uniform sampler2D u_ssao;
uniform bool u_apply_ssao;

out vec4 FragColor;

void main()
{
	//extract uvs from pixel screenpos. From  [-1 1]to [0 1]
	vec2 uv = gl_FragCoord.xy * u_iRes.xy;

	sMaterial material = init_material(uv);

	vec4 color = material.albedo;

	//From [0 1]to [-1 1], and inverse to get world position
	float depth = texture( u_depth_texture, uv ).x;
	vec4 screen_pos = vec4(uv.x*2.0-1.0, uv.y*2.0-1.0, depth*2.0-1.0, 1.0);
	vec4 proj_worldpos = u_inverse_viewprojection * screen_pos;
	vec3 world_pos = proj_worldpos.xyz / proj_worldpos.w;

	//revert the normalisation during pre-pass
	vec3 N = texture( u_normal_texture, uv ).xyz*2.0-vec3(1.0);
	N = normalize(N);
	
	vec3 total_light = vec3(0.0);

	if(u_ilum_mode == 0){

		total_light += computePhong(N,world_pos);

	}else if(u_ilum_mode == 1){
		sLVectors vectors = set_vectors(uv, N, u_camera_position, world_pos);
		vec3 PBR = computePBR(vectors, world_pos, material.roughness, material.F0, material.Cdiffuse);
		total_light += PBR;
	}

	color.xyz *= total_light;

	//color.xyz = linear_to_gamma(color.xyz); //we will apply this in the tonemapper
	
	FragColor = color;
}

\ssao.fs

#version 330 core

#define MAX_POINTS 64

in vec2 v_uv;

uniform sampler2D u_depth_texture;
uniform sampler2D u_normal_texture;

uniform mat4 u_inverse_viewprojection;
uniform mat4 u_viewprojection;
uniform vec2 u_iRes;
uniform vec3 u_camera_position;
uniform int u_ilum_mode;

uniform float u_bias_slider;
uniform float u_max_distance;

uniform float u_radius;

uniform vec3 u_points[MAX_POINTS];

#include "realistic_normals"

out vec4 FragColor;

void main()
{
	//we want to center the sample in the center of the pixel
	vec2 uv = v_uv + u_iRes * 0.5;

	//read depth from depth buffer
	float depth = texture( u_depth_texture, uv ).x;

	//revert the normalisation during pre-pass
	vec3 N = texture( u_normal_texture, uv ).xyz*2.0-vec3(1.0);
	N = normalize(N);

	//ignore pixels in the background
	if(depth >= 1.0)
	{
		FragColor = vec4(1.0);
		return;
	}

	//create screenpos with the right depth
	vec4 screen_position = vec4(uv*2.0 - vec2(1.0), depth*2.0 - 1.0,1.0);

	//reproject
	vec4 proj_worldpos = u_inverse_viewprojection * screen_position;
	vec3 worldpos = proj_worldpos.xyz / proj_worldpos.w;


	const int samples = MAX_POINTS;
	int num = samples; //num samples that passed the are outside

	//to create the matrix33 to convert from tangent to world
	mat3 rotmat = cotangent_frame( N, worldpos, v_uv ); //Preguntar la alternativa a estas uv
	//for every sample around the point

	for( int i = 0; i < samples; ++i )
	{
		
		vec3 random_point =  (rotmat * u_points[i])* u_radius;

		//vec3 random_point = u_points[i] *u_radius;

		//compute is world position using the random
		vec3 p = worldpos + random_point;

		//find the uv in the depth buffer of this point
		vec4 proj = u_viewprojection * vec4(p,1.0);

		proj.xy /= proj.w; //convert to clipspace from homogeneous
		//apply a tiny bias to its z before converting to clip-space
		proj.z = (proj.z - u_bias_slider) / proj.w;
		proj.xyz = proj.xyz * 0.5 + vec3(0.5); //to [0..1]

		//read p true depth
		float pdepth = texture( u_depth_texture, proj.xy ).x;

		//compare true depth with its depth
		if( pdepth < proj.z && (abs(pdepth - proj.z) < u_max_distance*0.01)) //if true depth smaller, is inside
			num--; //remove this point from the list of visible

		//Mirar si la distancia (en lineal) entre el punt i el test es gran, no tenir en compte l'oclusi�
	}

	//finally, compute the AO factor as the ratio of visible points
	float ao = float(num) / float(samples);

	FragColor = vec4(vec3(ao), 1.0);
}


\tonemapper.fs
#version 330 core

in vec2 v_uv;

uniform sampler2D u_texture;
uniform float u_average_lum;
uniform float u_lumwhite2;
uniform float u_scale;
uniform bool u_apply;

#include "color_correction"

out vec4 FragColor;

void main() {
	vec4 color = texture2D( u_texture, v_uv );
	vec3 rgb = color.xyz;
	if(u_apply){
		float lum = dot(rgb, vec3(0.2126, 0.7152, 0.0722));
		float L = (u_scale / u_average_lum) * lum;
		float Ld = (L * (1.0 + L / u_lumwhite2)) / (1.0 + L);

		rgb = (rgb / lum) * Ld;
		rgb = max(rgb,vec3(0.001));
	}
	rgb = linear_to_gamma(rgb);
	gl_FragColor = vec4( rgb, color.a );
}

\deferred_ambient.fs

#version 330 core

in vec2 v_uv;

uniform vec3 u_light_ambient;
#include "color_correction"
#include "material"
uniform vec2 u_iRes;

uniform sampler2D u_ssao;
uniform bool u_apply_ssao;

out vec4 FragColor;

void main()
{
	//extract uvs from pixel screenpos. From  [-1 1]to [0 1]
	vec2 uv = gl_FragCoord.xy * u_iRes.xy;

	sMaterial material = init_material(uv);

	if(u_apply_ssao)
		material.ao = texture( u_ssao, uv ).x;

	vec4 color = material.albedo;
	
	vec3 total_light = vec3(0.0);

	total_light += gamma_to_linear(u_light_ambient);
	total_light *= material.ao;

	color.xyz *= total_light;

	color.xyz += material.emission;
	//color.xyz = linear_to_gamma(color.xyz); //we will apply this in the tonemapper
	

	FragColor = color;
}


\probe.fs

#version 330 core

in vec3 v_position;
in vec3 v_world_position;
in vec3 v_normal;
in vec2 v_uv;
in vec4 v_color;

uniform vec4 u_color;
uniform sampler2D u_albedo;
uniform float u_time;
uniform float u_alpha_cutoff;

uniform float u_coeffs[9];

out vec4 FragColor;

void main()
{
	vec2 uv = v_uv;
	vec4 color = u_color;
	color *= texture( u_albedo, v_uv );

	if(color.a < u_alpha_cutoff)
		discard;

	FragColor = color;
}
